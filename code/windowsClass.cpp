////////////////////////////////////////////////#include <Windows.h>
////////////////////////////////////////////////const char g_szClassName[] = "myWindowsClass";
////////////////////////////////////////////////// Step 4: the Window Procedure
////////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam){
////////////////////////////////////////////////	switch (msg){
////////////////////////////////////////////////	case WM_CLOSE:
////////////////////////////////////////////////		DestroyWindow(hwnd);
////////////////////////////////////////////////		break;
////////////////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////////////////		PostQuitMessage(0);
////////////////////////////////////////////////		break;
////////////////////////////////////////////////	default:
////////////////////////////////////////////////		return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////////////////	}
////////////////////////////////////////////////	return 0;
////////////////////////////////////////////////}
////////////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE FreeProcInstance, LPSTR lpCmdLine, int nCmdShow){
////////////////////////////////////////////////	WNDCLASSEX wc;
////////////////////////////////////////////////	HWND hwnd;
////////////////////////////////////////////////	MSG Msg;
////////////////////////////////////////////////	//Step 1: Registering the Window Class
////////////////////////////////////////////////	wc.cbSize = sizeof(WNDCLASSEX);
////////////////////////////////////////////////	wc.style = 0;
////////////////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////////////////	wc.cbWndExtra = 0;
////////////////////////////////////////////////	wc.cbClsExtra = 0;
////////////////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////////////////	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
////////////////////////////////////////////////	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
////////////////////////////////////////////////	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
////////////////////////////////////////////////	wc.lpszMenuName = NULL;
////////////////////////////////////////////////	wc.lpszClassName = g_szClassName;
////////////////////////////////////////////////	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
////////////////////////////////////////////////	if (!RegisterClassEx(&wc)){
////////////////////////////////////////////////		MessageBox(NULL, "Window Registration Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
////////////////////////////////////////////////		return 0;
////////////////////////////////////////////////	}
////////////////////////////////////////////////	// Step 2: Creating the Window
////////////////////////////////////////////////	hwnd = CreateWindowEx(WS_EX_CLIENTEDGE, g_szClassName, "The title of my window", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 240, 120, NULL, NULL, hInstance, NULL);
////////////////////////////////////////////////	if (hwnd == NULL){
////////////////////////////////////////////////		MessageBox(NULL, "Window Creation Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
////////////////////////////////////////////////		return 0;
////////////////////////////////////////////////	}
////////////////////////////////////////////////	ShowWindow(hwnd, nCmdShow);
////////////////////////////////////////////////	UpdateWindow(hwnd);
////////////////////////////////////////////////	//Step 3: The Message Loop
////////////////////////////////////////////////	while (GetMessage(&Msg, NULL, 0, 0) > 0){
////////////////////////////////////////////////		TranslateMessage(&Msg);
////////////////////////////////////////////////		DispatchMessage(&Msg);
////////////////////////////////////////////////
////////////////////////////////////////////////	}
////////////////////////////////////////////////	return Msg.wParam;
////////////////////////////////////////////////}
//////////////////////////////////////////////#include "windows.h"
//////////////////////////////////////////////
//////////////////////////////////////////////// Gọi hàm xử lí message
//////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////////////
//////////////////////////////////////////////// Hàm Winmain()
//////////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////////////////{
//////////////////////////////////////////////	MSG  msg;
//////////////////////////////////////////////	HWND hwnd;
//////////////////////////////////////////////	WNDCLASS wc;
//////////////////////////////////////////////	wc.style = CS_HREDRAW | CS_VREDRAW;
//////////////////////////////////////////////	wc.cbClsExtra = 0;
//////////////////////////////////////////////	wc.cbWndExtra = 0;
//////////////////////////////////////////////
//////////////////////////////////////////////	wc.lpszClassName = TEXT("Window");
//////////////////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////////////////	wc.lpszMenuName = NULL;
//////////////////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////////////////
//////////////////////////////////////////////	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
//////////////////////////////////////////////	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
//////////////////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////////////////
//////////////////////////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Window"), WS_OVERLAPPEDWINDOW | WS_VISIBLE,
//////////////////////////////////////////////		100, 100, 250, 150, NULL, NULL, hInstance, NULL);
//////////////////////////////////////////////	ShowWindow(hwnd, nCmdShow);   // Display windows
//////////////////////////////////////////////
//////////////////////////////////////////////	UpdateWindow(hwnd);   // Update windows
//////////////////////////////////////////////
//////////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////////////////	{
//////////////////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////////////////	}
//////////////////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////////////////}
//////////////////////////////////////////////
//////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////////////{
//////////////////////////////////////////////	switch (msg)
//////////////////////////////////////////////	{
//////////////////////////////////////////////	case WM_DESTROY:
//////////////////////////////////////////////	{
//////////////////////////////////////////////					   PostQuitMessage(0);
//////////////////////////////////////////////					   return 0;
//////////////////////////////////////////////	}
//////////////////////////////////////////////
//////////////////////////////////////////////	}
//////////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////////////}
////////////////////////////////////////////#include "windows.h"
////////////////////////////////////////////
////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////////////
////////////////////////////////////////////void AddMenus(HWND);
////////////////////////////////////////////
//////////////////////////////////////////////Define ID
////////////////////////////////////////////#define IDM_FILE_NEW 1
////////////////////////////////////////////#define IDM_FILE_OPEN 2
////////////////////////////////////////////#define IDM_FILE_QUIT 3
////////////////////////////////////////////
////////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
////////////////////////////////////////////{
////////////////////////////////////////////	MSG  msg;
////////////////////////////////////////////	WNDCLASS wc = { 0 };
////////////////////////////////////////////	wc.lpszClassName = TEXT("Menu");
////////////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////////////////////////////////////	RegisterClass(&wc);
////////////////////////////////////////////
////////////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Menu"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 200, 150, 0, 0, hInstance, 0);
////////////////////////////////////////////
////////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////////////////////	{
////////////////////////////////////////////		TranslateMessage(&msg);
////////////////////////////////////////////		DispatchMessage(&msg);
////////////////////////////////////////////	}
////////////////////////////////////////////	return (int)msg.wParam;
////////////////////////////////////////////}
////////////////////////////////////////////
////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////////////{
////////////////////////////////////////////	switch (msg)
////////////////////////////////////////////	{
////////////////////////////////////////////	case WM_CREATE:
////////////////////////////////////////////		AddMenus(hwnd);
////////////////////////////////////////////		break;
////////////////////////////////////////////	case WM_COMMAND:
////////////////////////////////////////////		switch (LOWORD(wParam))
////////////////////////////////////////////		{
////////////////////////////////////////////		case IDM_FILE_NEW:
////////////////////////////////////////////		case IDM_FILE_OPEN:
////////////////////////////////////////////			Beep(50, 100);
////////////////////////////////////////////			break;
////////////////////////////////////////////		case IDM_FILE_QUIT:
////////////////////////////////////////////			SendMessage(hwnd, WM_CLOSE, 0, 0);
////////////////////////////////////////////			break;
////////////////////////////////////////////		}
////////////////////////////////////////////		break;
////////////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////////////		PostQuitMessage(0);
////////////////////////////////////////////		break;
////////////////////////////////////////////	}
////////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////////////}
////////////////////////////////////////////
////////////////////////////////////////////void AddMenus(HWND hwnd)
////////////////////////////////////////////{
////////////////////////////////////////////	HMENU hMenubar;
////////////////////////////////////////////	HMENU hMenu;
////////////////////////////////////////////	hMenubar = CreateMenu();
////////////////////////////////////////////	hMenu = CreateMenu();
////////////////////////////////////////////	AppendMenu(hMenu, MF_CHECKED, IDM_FILE_NEW, TEXT("New"));
////////////////////////////////////////////	AppendMenu(hMenu, MF_GRAYED, IDM_FILE_NEW, TEXT("Create"));
////////////////////////////////////////////	AppendMenu(hMenu, MF_MENUBARBREAK, IDM_FILE_OPEN, TEXT("Open"));
////////////////////////////////////////////	AppendMenu(hMenu, MF_SEPARATOR, 0, NULL);
////////////////////////////////////////////	AppendMenu(hMenu, MF_HELP, IDM_FILE_QUIT, TEXT("Quit"));
////////////////////////////////////////////	AppendMenu(hMenubar, MF_POPUP, (UINT_PTR)hMenu, TEXT("File"));
////////////////////////////////////////////	SetMenu(hwnd, hMenubar);
////////////////////////////////////////////}
//////////////////////////////////////////#include "windows.h"
//////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////////
//////////////////////////////////////////#define IDM_FILE_NEW 1
//////////////////////////////////////////#define IDM_FILE_OPEN 2
//////////////////////////////////////////#define IDM_FILE_QUIT 3
//////////////////////////////////////////
//////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
//////////////////////////////////////////
//////////////////////////////////////////	LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////////////{
//////////////////////////////////////////	MSG  msg;
//////////////////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////////////////	wc.lpszClassName = TEXT("Application");
//////////////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////////////////////////
//////////////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////////////
//////////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Popup Menu"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 200, 150, 0, 0, hInstance, 0);
//////////////////////////////////////////
//////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////////////	{
//////////////////////////////////////////		TranslateMessage(&msg);
//////////////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////////////	}
//////////////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////////////}
//////////////////////////////////////////
//////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////////{
//////////////////////////////////////////	HMENU hMenu;
//////////////////////////////////////////	POINT point;
//////////////////////////////////////////
//////////////////////////////////////////	switch (msg)
//////////////////////////////////////////	{
//////////////////////////////////////////	case WM_COMMAND:
//////////////////////////////////////////		switch (LOWORD(wParam))
//////////////////////////////////////////		{
//////////////////////////////////////////		case IDM_FILE_NEW:
//////////////////////////////////////////		case IDM_FILE_OPEN:
//////////////////////////////////////////			Beep(327, 1000);
//////////////////////////////////////////			break;
//////////////////////////////////////////		case IDM_FILE_QUIT:
//////////////////////////////////////////			SendMessage(hwnd, WM_CLOSE, 0, 0);
//////////////////////////////////////////			break;
//////////////////////////////////////////		}
//////////////////////////////////////////		break;
//////////////////////////////////////////
//////////////////////////////////////////	case WM_RBUTTONUP:
//////////////////////////////////////////		point.x = LOWORD(lParam);
//////////////////////////////////////////		point.y = HIWORD(lParam);
//////////////////////////////////////////		hMenu = CreatePopupMenu();
//////////////////////////////////////////		ClientToScreen(hwnd, &point);
//////////////////////////////////////////
//////////////////////////////////////////		AppendMenu(hMenu, MF_STRING, IDM_FILE_NEW, TEXT("&New"));
//////////////////////////////////////////		AppendMenu(hMenu, MF_STRING, IDM_FILE_OPEN, TEXT("&Open"));
//////////////////////////////////////////		AppendMenu(hMenu, MF_SEPARATOR, 0, NULL);
//////////////////////////////////////////		AppendMenu(hMenu, MF_STRING, IDM_FILE_QUIT, TEXT("&Quit"));
//////////////////////////////////////////
//////////////////////////////////////////		TrackPopupMenu(hMenu, TPM_RIGHTBUTTON, point.x, point.y, 0, hwnd, NULL);
//////////////////////////////////////////		DestroyMenu(hMenu);
//////////////////////////////////////////		break;
//////////////////////////////////////////	case WM_DESTROY:
//////////////////////////////////////////		PostQuitMessage(0);
//////////////////////////////////////////		break;
//////////////////////////////////////////
//////////////////////////////////////////	}
//////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////////}
////////////////////////////////////////#include "windows.h"
////////////////////////////////////////
////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////////LRESULT CALLBACK DialogProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////////
////////////////////////////////////////void CreateDialogBox(HWND);
////////////////////////////////////////void RegisterDialogClass(HWND);
////////////////////////////////////////
////////////////////////////////////////HINSTANCE ghInstance;
////////////////////////////////////////
////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
////////////////////////////////////////{
////////////////////////////////////////	MSG msg;
////////////////////////////////////////	HWND hwnd;
////////////////////////////////////////	WNDCLASS wc = { 0 };
////////////////////////////////////////	wc.lpszClassName = TEXT("Window");
////////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////////	RegisterClass(&wc);
////////////////////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Window"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 250, 150, NULL, NULL, hInstance, NULL);
////////////////////////////////////////
////////////////////////////////////////	ghInstance = hInstance;
////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////////////////	{
////////////////////////////////////////		DispatchMessage(&msg);
////////////////////////////////////////	}
////////////////////////////////////////	return (int)msg.wParam;
////////////////////////////////////////}
////////////////////////////////////////
////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////////{
////////////////////////////////////////	switch (msg)
////////////////////////////////////////	{
////////////////////////////////////////	case WM_CREATE:
////////////////////////////////////////		RegisterDialogClass(hwnd);
////////////////////////////////////////		CreateWindow(TEXT("button"), TEXT("Show dialog"), WS_VISIBLE | WS_CHILD, 20, 50, 95, 25, hwnd, (HMENU)1, NULL, NULL);
////////////////////////////////////////		break;
////////////////////////////////////////	case WM_COMMAND:
////////////////////////////////////////		CreateDialogBox(hwnd);
////////////////////////////////////////		break;
////////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////////		PostQuitMessage(0);
////////////////////////////////////////		return 0;
////////////////////////////////////////	}
////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////////}
////////////////////////////////////////
////////////////////////////////////////LRESULT CALLBACK DialogProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////////{
////////////////////////////////////////	switch (msg)
////////////////////////////////////////	{
////////////////////////////////////////	case WM_CREATE:
////////////////////////////////////////		CreateWindow(TEXT("button"), TEXT("Ok"), WS_VISIBLE | WS_CHILD, 50, 50, 80, 25, hwnd, (HMENU)1, NULL, NULL);
////////////////////////////////////////		break;
////////////////////////////////////////	case WM_COMMAND:
////////////////////////////////////////		DestroyWindow(hwnd);
////////////////////////////////////////		break;
////////////////////////////////////////	case WM_CLOSE:
////////////////////////////////////////		DestroyWindow(hwnd);
////////////////////////////////////////		break;
////////////////////////////////////////	}
////////////////////////////////////////	return (DefWindowProc(hwnd, msg, wParam, lParam));
////////////////////////////////////////}
////////////////////////////////////////
////////////////////////////////////////void RegisterDialogClass(HWND hwnd)
////////////////////////////////////////{
////////////////////////////////////////	WNDCLASSEX wc = { 0 };
////////////////////////////////////////	wc.cbSize = sizeof(WNDCLASSEX);
////////////////////////////////////////	wc.lpfnWndProc = (WNDPROC)DialogProc;
////////////////////////////////////////	wc.hInstance = ghInstance;
////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////////	wc.lpszClassName = TEXT("DialogClass");
////////////////////////////////////////	RegisterClassEx(&wc);
////////////////////////////////////////}
////////////////////////////////////////
////////////////////////////////////////void CreateDialogBox(HWND hwnd)
////////////////////////////////////////{
////////////////////////////////////////	CreateWindowEx(WS_EX_DLGMODALFRAME | WS_EX_TOPMOST, TEXT("DialogClass"), TEXT("Dialog Box"), WS_VISIBLE | WS_SYSMENU | WS_CAPTION, 100, 100, 200, 150, NULL, NULL, ghInstance, NULL);
////////////////////////////////////////}
//////////////////////////////////////#include "windows.h"
//////////////////////////////////////
//////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////LRESULT CALLBACK PanelProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////
//////////////////////////////////////void RegisterPanel(void);
//////////////////////////////////////COLORREF ShowColorDialog(HWND);
//////////////////////////////////////
//////////////////////////////////////COLORREF gColor = RGB(255, 255, 255);
//////////////////////////////////////
//////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////////{
//////////////////////////////////////	MSG msg;
//////////////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////////////	wc.lpszClassName = TEXT("Color dialog box");
//////////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Color dialog box"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 150, 150, 250, 200, 0, 0, hInstance, 0);
//////////////////////////////////////
//////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////////	{
//////////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////////	}
//////////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////
//////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////{
//////////////////////////////////////	static HWND hwndPanel;
//////////////////////////////////////	switch (msg)
//////////////////////////////////////	{
//////////////////////////////////////	case WM_CREATE:
//////////////////////////////////////	{
//////////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Color"), WS_VISIBLE | WS_CHILD, 20, 30, 80, 25, hwnd, (HMENU)1, NULL, NULL);
//////////////////////////////////////					  RegisterPanel();
//////////////////////////////////////					  hwndPanel = CreateWindow(TEXT("Panel"), NULL, WS_CHILD | WS_VISIBLE, 130, 30, 80, 80, hwnd, (HMENU)2, NULL, NULL);
//////////////////////////////////////					  break;
//////////////////////////////////////	}
//////////////////////////////////////	case WM_COMMAND:
//////////////////////////////////////	{
//////////////////////////////////////					   gColor = ShowColorDialog(hwnd);
//////////////////////////////////////					   InvalidateRect(hwndPanel, NULL, TRUE);
//////////////////////////////////////					   break;
//////////////////////////////////////	}
//////////////////////////////////////	case WM_DESTROY:
//////////////////////////////////////	{
//////////////////////////////////////					   PostQuitMessage(0);
//////////////////////////////////////					   break;
//////////////////////////////////////	}
//////////////////////////////////////	}
//////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////LRESULT CALLBACK PanelProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////{
//////////////////////////////////////	HDC hdc;
//////////////////////////////////////	PAINTSTRUCT ps;
//////////////////////////////////////	RECT rect;
//////////////////////////////////////
//////////////////////////////////////	switch (msg)
//////////////////////////////////////	{
//////////////////////////////////////	case WM_PAINT:
//////////////////////////////////////	{
//////////////////////////////////////					 GetClientRect(hwnd, &rect);
//////////////////////////////////////					 hdc = BeginPaint(hwnd, &ps);
//////////////////////////////////////					 SetBkColor(hdc, gColor);
//////////////////////////////////////					 ExtTextOut(hdc, 0, 0, ETO_OPAQUE, &rect, TEXT(""), 0, NULL);
//////////////////////////////////////					 EndPaint(hwnd, &ps);
//////////////////////////////////////					 break;
//////////////////////////////////////	}
//////////////////////////////////////	}
//////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////COLORREF ShowColorDialog(HWND hwnd)
//////////////////////////////////////{
//////////////////////////////////////	CHOOSECOLOR cc;
//////////////////////////////////////	static COLORREF crCustClr[16];
//////////////////////////////////////	ZeroMemory(&cc, sizeof(cc));
//////////////////////////////////////	cc.lStructSize = sizeof(cc);
//////////////////////////////////////	cc.hwndOwner = hwnd;
//////////////////////////////////////	cc.lpCustColors = (LPDWORD)crCustClr;
//////////////////////////////////////	cc.rgbResult = RGB(0, 255, 0);
//////////////////////////////////////	cc.Flags = CC_FULLOPEN | CC_RGBINIT;
//////////////////////////////////////	ChooseColor(&cc);
//////////////////////////////////////
//////////////////////////////////////	return cc.rgbResult;
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////void RegisterPanel(void)
//////////////////////////////////////{
//////////////////////////////////////	WNDCLASS rwc = { 0 };
//////////////////////////////////////	rwc.lpszClassName = TEXT("Panel");
//////////////////////////////////////	rwc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
//////////////////////////////////////	rwc.lpfnWndProc = PanelProc;
//////////////////////////////////////	RegisterClass(&rwc);
//////////////////////////////////////}
////////////////////////////////////#include "windows.h"
////////////////////////////////////
////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////
////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
////////////////////////////////////
////////////////////////////////////	LPSTR lpCmdLine, int nCmdShow)
////////////////////////////////////{
////////////////////////////////////	MSG  msg;
////////////////////////////////////	WNDCLASS wc = { 0 };
////////////////////////////////////	wc.lpszClassName = TEXT("Buttons");
////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////////////////////////////
////////////////////////////////////	RegisterClass(&wc);
////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Buttons"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 150, 150, 230, 150, 0, 0, hInstance, 0);
////////////////////////////////////
////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////////////	{
////////////////////////////////////		TranslateMessage(&msg);
////////////////////////////////////		DispatchMessage(&msg);
////////////////////////////////////	}
////////////////////////////////////	return (int)msg.wParam;
////////////////////////////////////}
////////////////////////////////////
////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////{
////////////////////////////////////	switch (msg)
////////////////////////////////////	{
////////////////////////////////////	case WM_CREATE:
////////////////////////////////////	{
////////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Beep"), WS_VISIBLE | WS_CHILD, 20, 50, 80, 25, hwnd, (HMENU)1, NULL, NULL);
////////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Quit"), WS_VISIBLE | WS_CHILD, 120, 50, 80, 25, hwnd, (HMENU)2, NULL, NULL);
////////////////////////////////////					  break;
////////////////////////////////////	}
////////////////////////////////////	case WM_COMMAND:
////////////////////////////////////	{
////////////////////////////////////					   if (LOWORD(wParam) == 1)
////////////////////////////////////					   {
////////////////////////////////////						   Beep(400, 500);
////////////////////////////////////					   }
////////////////////////////////////					   if (LOWORD(wParam) == 2)
////////////////////////////////////					   {
////////////////////////////////////						   PostQuitMessage(0);
////////////////////////////////////					   }
////////////////////////////////////					   break;
////////////////////////////////////	}
////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////	{
////////////////////////////////////					   PostQuitMessage(0);
////////////////////////////////////					   break;
////////////////////////////////////	}
////////////////////////////////////	}
////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////}
//////////////////////////////////#include "windows.h"
//////////////////////////////////
//////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////TCHAR title[] = TEXT("Check Box");
//////////////////////////////////
//////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////{
//////////////////////////////////	MSG  msg;
//////////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////////	wc.lpszClassName = TEXT("Check Box");
//////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////////////////
//////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////	CreateWindow(wc.lpszClassName, title, WS_OVERLAPPEDWINDOW | WS_VISIBLE, 150, 150, 230, 150, 0, 0, hInstance, 0);
//////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////	{
//////////////////////////////////		TranslateMessage(&msg);
//////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////	}
//////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////}
//////////////////////////////////
//////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////{
//////////////////////////////////	switch (msg)
//////////////////////////////////	{
//////////////////////////////////	case WM_CREATE:
//////////////////////////////////	{
//////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Show Title"), WS_VISIBLE | WS_CHILD | BS_CHECKBOX, 20, 20, 185, 35, hwnd, (HMENU)1, ((LPCREATESTRUCT)lParam)->hInstance, NULL);
//////////////////////////////////					  CheckDlgButton(hwnd, 1, BST_CHECKED);
//////////////////////////////////					  break;
//////////////////////////////////	}
//////////////////////////////////	case WM_COMMAND:
//////////////////////////////////	{
//////////////////////////////////					   BOOL checked = IsDlgButtonChecked(hwnd, 1);
//////////////////////////////////					   if (checked)
//////////////////////////////////					   {
//////////////////////////////////						   CheckDlgButton(hwnd, 1, BST_UNCHECKED);
//////////////////////////////////						   SetWindowText(hwnd, TEXT("Unchecked"));
//////////////////////////////////					   }
//////////////////////////////////					   else
//////////////////////////////////					   {
//////////////////////////////////						   CheckDlgButton(hwnd, 1, BST_CHECKED);
//////////////////////////////////						   SetWindowText(hwnd, title);
//////////////////////////////////					   }
//////////////////////////////////					   break;
//////////////////////////////////	}
//////////////////////////////////	case WM_DESTROY:
//////////////////////////////////	{
//////////////////////////////////					   PostQuitMessage(0);
//////////////////////////////////					   break;
//////////////////////////////////	}
//////////////////////////////////	}
//////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////}
//////////////////////////////////////////////#include <Windows.h>
//////////////////////////////////////////////const char g_szClassName[] = "myWindowsClass";
//////////////////////////////////////////////// Step 4: the Window Procedure
//////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam){
//////////////////////////////////////////////	switch (msg){
//////////////////////////////////////////////	case WM_CLOSE:
//////////////////////////////////////////////		DestroyWindow(hwnd);
//////////////////////////////////////////////		break;
//////////////////////////////////////////////	case WM_DESTROY:
//////////////////////////////////////////////		PostQuitMessage(0);
//////////////////////////////////////////////		break;
//////////////////////////////////////////////	default:
//////////////////////////////////////////////		return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////////////	}
//////////////////////////////////////////////	return 0;
//////////////////////////////////////////////}
//////////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE FreeProcInstance, LPSTR lpCmdLine, int nCmdShow){
//////////////////////////////////////////////	WNDCLASSEX wc;
//////////////////////////////////////////////	HWND hwnd;
//////////////////////////////////////////////	MSG Msg;
//////////////////////////////////////////////	//Step 1: Registering the Window Class
//////////////////////////////////////////////	wc.cbSize = sizeof(WNDCLASSEX);
//////////////////////////////////////////////	wc.style = 0;
//////////////////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////////////////	wc.cbWndExtra = 0;
//////////////////////////////////////////////	wc.cbClsExtra = 0;
//////////////////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////////////////	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
//////////////////////////////////////////////	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
//////////////////////////////////////////////	wc.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
//////////////////////////////////////////////	wc.lpszMenuName = NULL;
//////////////////////////////////////////////	wc.lpszClassName = g_szClassName;
//////////////////////////////////////////////	wc.hIconSm = LoadIcon(NULL, IDI_APPLICATION);
//////////////////////////////////////////////	if (!RegisterClassEx(&wc)){
//////////////////////////////////////////////		MessageBox(NULL, "Window Registration Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
//////////////////////////////////////////////		return 0;
//////////////////////////////////////////////	}
//////////////////////////////////////////////	// Step 2: Creating the Window
//////////////////////////////////////////////	hwnd = CreateWindowEx(WS_EX_CLIENTEDGE, g_szClassName, "The title of my window", WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 240, 120, NULL, NULL, hInstance, NULL);
//////////////////////////////////////////////	if (hwnd == NULL){
//////////////////////////////////////////////		MessageBox(NULL, "Window Creation Failed!", "Error!", MB_ICONEXCLAMATION | MB_OK);
//////////////////////////////////////////////		return 0;
//////////////////////////////////////////////	}
//////////////////////////////////////////////	ShowWindow(hwnd, nCmdShow);
//////////////////////////////////////////////	UpdateWindow(hwnd);
//////////////////////////////////////////////	//Step 3: The Message Loop
//////////////////////////////////////////////	while (GetMessage(&Msg, NULL, 0, 0) > 0){
//////////////////////////////////////////////		TranslateMessage(&Msg);
//////////////////////////////////////////////		DispatchMessage(&Msg);
//////////////////////////////////////////////
//////////////////////////////////////////////	}
//////////////////////////////////////////////	return Msg.wParam;
//////////////////////////////////////////////}
////////////////////////////////////////////#include "windows.h"
////////////////////////////////////////////
////////////////////////////////////////////// Gọi hàm xử lí message
////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////////////
////////////////////////////////////////////// Hàm Winmain()
////////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
////////////////////////////////////////////{
////////////////////////////////////////////	MSG  msg;
////////////////////////////////////////////	HWND hwnd;
////////////////////////////////////////////	WNDCLASS wc;
////////////////////////////////////////////	wc.style = CS_HREDRAW | CS_VREDRAW;
////////////////////////////////////////////	wc.cbClsExtra = 0;
////////////////////////////////////////////	wc.cbWndExtra = 0;
////////////////////////////////////////////
////////////////////////////////////////////	wc.lpszClassName = TEXT("Window");
////////////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////////////	wc.lpszMenuName = NULL;
////////////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////////////
////////////////////////////////////////////	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
////////////////////////////////////////////	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
////////////////////////////////////////////	RegisterClass(&wc);
////////////////////////////////////////////
////////////////////////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Window"), WS_OVERLAPPEDWINDOW | WS_VISIBLE,
////////////////////////////////////////////		100, 100, 250, 150, NULL, NULL, hInstance, NULL);
////////////////////////////////////////////	ShowWindow(hwnd, nCmdShow);   // Display windows
////////////////////////////////////////////
////////////////////////////////////////////	UpdateWindow(hwnd);   // Update windows
////////////////////////////////////////////
////////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////////////////////	{
////////////////////////////////////////////		DispatchMessage(&msg);
////////////////////////////////////////////	}
////////////////////////////////////////////	return (int)msg.wParam;
////////////////////////////////////////////}
////////////////////////////////////////////
////////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////////////{
////////////////////////////////////////////	switch (msg)
////////////////////////////////////////////	{
////////////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////////////	{
////////////////////////////////////////////					   PostQuitMessage(0);
////////////////////////////////////////////					   return 0;
////////////////////////////////////////////	}
////////////////////////////////////////////
////////////////////////////////////////////	}
////////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////////////}
//////////////////////////////////////////#include "windows.h"
//////////////////////////////////////////
//////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////////
//////////////////////////////////////////void AddMenus(HWND);
//////////////////////////////////////////
////////////////////////////////////////////Define ID
//////////////////////////////////////////#define IDM_FILE_NEW 1
//////////////////////////////////////////#define IDM_FILE_OPEN 2
//////////////////////////////////////////#define IDM_FILE_QUIT 3
//////////////////////////////////////////
//////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////////////{
//////////////////////////////////////////	MSG  msg;
//////////////////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////////////////	wc.lpszClassName = TEXT("Menu");
//////////////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////////////
//////////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Menu"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 200, 150, 0, 0, hInstance, 0);
//////////////////////////////////////////
//////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////////////	{
//////////////////////////////////////////		TranslateMessage(&msg);
//////////////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////////////	}
//////////////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////////////}
//////////////////////////////////////////
//////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////////{
//////////////////////////////////////////	switch (msg)
//////////////////////////////////////////	{
//////////////////////////////////////////	case WM_CREATE:
//////////////////////////////////////////		AddMenus(hwnd);
//////////////////////////////////////////		break;
//////////////////////////////////////////	case WM_COMMAND:
//////////////////////////////////////////		switch (LOWORD(wParam))
//////////////////////////////////////////		{
//////////////////////////////////////////		case IDM_FILE_NEW:
//////////////////////////////////////////		case IDM_FILE_OPEN:
//////////////////////////////////////////			Beep(50, 100);
//////////////////////////////////////////			break;
//////////////////////////////////////////		case IDM_FILE_QUIT:
//////////////////////////////////////////			SendMessage(hwnd, WM_CLOSE, 0, 0);
//////////////////////////////////////////			break;
//////////////////////////////////////////		}
//////////////////////////////////////////		break;
//////////////////////////////////////////	case WM_DESTROY:
//////////////////////////////////////////		PostQuitMessage(0);
//////////////////////////////////////////		break;
//////////////////////////////////////////	}
//////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////////}
//////////////////////////////////////////
//////////////////////////////////////////void AddMenus(HWND hwnd)
//////////////////////////////////////////{
//////////////////////////////////////////	HMENU hMenubar;
//////////////////////////////////////////	HMENU hMenu;
//////////////////////////////////////////	hMenubar = CreateMenu();
//////////////////////////////////////////	hMenu = CreateMenu();
//////////////////////////////////////////	AppendMenu(hMenu, MF_CHECKED, IDM_FILE_NEW, TEXT("New"));
//////////////////////////////////////////	AppendMenu(hMenu, MF_GRAYED, IDM_FILE_NEW, TEXT("Create"));
//////////////////////////////////////////	AppendMenu(hMenu, MF_MENUBARBREAK, IDM_FILE_OPEN, TEXT("Open"));
//////////////////////////////////////////	AppendMenu(hMenu, MF_SEPARATOR, 0, NULL);
//////////////////////////////////////////	AppendMenu(hMenu, MF_HELP, IDM_FILE_QUIT, TEXT("Quit"));
//////////////////////////////////////////	AppendMenu(hMenubar, MF_POPUP, (UINT_PTR)hMenu, TEXT("File"));
//////////////////////////////////////////	SetMenu(hwnd, hMenubar);
//////////////////////////////////////////}
////////////////////////////////////////#include "windows.h"
////////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////////
////////////////////////////////////////#define IDM_FILE_NEW 1
////////////////////////////////////////#define IDM_FILE_OPEN 2
////////////////////////////////////////#define IDM_FILE_QUIT 3
////////////////////////////////////////
////////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
////////////////////////////////////////
////////////////////////////////////////	LPSTR lpCmdLine, int nCmdShow)
////////////////////////////////////////{
////////////////////////////////////////	MSG  msg;
////////////////////////////////////////	WNDCLASS wc = { 0 };
////////////////////////////////////////	wc.lpszClassName = TEXT("Application");
////////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////////////////////////////////
////////////////////////////////////////	RegisterClass(&wc);
////////////////////////////////////////
////////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Popup Menu"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 200, 150, 0, 0, hInstance, 0);
////////////////////////////////////////
////////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////////////////	{
////////////////////////////////////////		TranslateMessage(&msg);
////////////////////////////////////////		DispatchMessage(&msg);
////////////////////////////////////////	}
////////////////////////////////////////	return (int)msg.wParam;
////////////////////////////////////////}
////////////////////////////////////////
////////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////////{
////////////////////////////////////////	HMENU hMenu;
////////////////////////////////////////	POINT point;
////////////////////////////////////////
////////////////////////////////////////	switch (msg)
////////////////////////////////////////	{
////////////////////////////////////////	case WM_COMMAND:
////////////////////////////////////////		switch (LOWORD(wParam))
////////////////////////////////////////		{
////////////////////////////////////////		case IDM_FILE_NEW:
////////////////////////////////////////		case IDM_FILE_OPEN:
////////////////////////////////////////			Beep(327, 1000);
////////////////////////////////////////			break;
////////////////////////////////////////		case IDM_FILE_QUIT:
////////////////////////////////////////			SendMessage(hwnd, WM_CLOSE, 0, 0);
////////////////////////////////////////			break;
////////////////////////////////////////		}
////////////////////////////////////////		break;
////////////////////////////////////////
////////////////////////////////////////	case WM_RBUTTONUP:
////////////////////////////////////////		point.x = LOWORD(lParam);
////////////////////////////////////////		point.y = HIWORD(lParam);
////////////////////////////////////////		hMenu = CreatePopupMenu();
////////////////////////////////////////		ClientToScreen(hwnd, &point);
////////////////////////////////////////
////////////////////////////////////////		AppendMenu(hMenu, MF_STRING, IDM_FILE_NEW, TEXT("&New"));
////////////////////////////////////////		AppendMenu(hMenu, MF_STRING, IDM_FILE_OPEN, TEXT("&Open"));
////////////////////////////////////////		AppendMenu(hMenu, MF_SEPARATOR, 0, NULL);
////////////////////////////////////////		AppendMenu(hMenu, MF_STRING, IDM_FILE_QUIT, TEXT("&Quit"));
////////////////////////////////////////
////////////////////////////////////////		TrackPopupMenu(hMenu, TPM_RIGHTBUTTON, point.x, point.y, 0, hwnd, NULL);
////////////////////////////////////////		DestroyMenu(hMenu);
////////////////////////////////////////		break;
////////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////////		PostQuitMessage(0);
////////////////////////////////////////		break;
////////////////////////////////////////
////////////////////////////////////////	}
////////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////////}
//////////////////////////////////////#include "windows.h"
//////////////////////////////////////
//////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////LRESULT CALLBACK DialogProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////////
//////////////////////////////////////void CreateDialogBox(HWND);
//////////////////////////////////////void RegisterDialogClass(HWND);
//////////////////////////////////////
//////////////////////////////////////HINSTANCE ghInstance;
//////////////////////////////////////
//////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////////{
//////////////////////////////////////	MSG msg;
//////////////////////////////////////	HWND hwnd;
//////////////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////////////	wc.lpszClassName = TEXT("Window");
//////////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Window"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 250, 150, NULL, NULL, hInstance, NULL);
//////////////////////////////////////
//////////////////////////////////////	ghInstance = hInstance;
//////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////////	{
//////////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////////	}
//////////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////{
//////////////////////////////////////	switch (msg)
//////////////////////////////////////	{
//////////////////////////////////////	case WM_CREATE:
//////////////////////////////////////		RegisterDialogClass(hwnd);
//////////////////////////////////////		CreateWindow(TEXT("button"), TEXT("Show dialog"), WS_VISIBLE | WS_CHILD, 20, 50, 95, 25, hwnd, (HMENU)1, NULL, NULL);
//////////////////////////////////////		break;
//////////////////////////////////////	case WM_COMMAND:
//////////////////////////////////////		CreateDialogBox(hwnd);
//////////////////////////////////////		break;
//////////////////////////////////////	case WM_DESTROY:
//////////////////////////////////////		PostQuitMessage(0);
//////////////////////////////////////		return 0;
//////////////////////////////////////	}
//////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////LRESULT CALLBACK DialogProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////////{
//////////////////////////////////////	switch (msg)
//////////////////////////////////////	{
//////////////////////////////////////	case WM_CREATE:
//////////////////////////////////////		CreateWindow(TEXT("button"), TEXT("Ok"), WS_VISIBLE | WS_CHILD, 50, 50, 80, 25, hwnd, (HMENU)1, NULL, NULL);
//////////////////////////////////////		break;
//////////////////////////////////////	case WM_COMMAND:
//////////////////////////////////////		DestroyWindow(hwnd);
//////////////////////////////////////		break;
//////////////////////////////////////	case WM_CLOSE:
//////////////////////////////////////		DestroyWindow(hwnd);
//////////////////////////////////////		break;
//////////////////////////////////////	}
//////////////////////////////////////	return (DefWindowProc(hwnd, msg, wParam, lParam));
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////void RegisterDialogClass(HWND hwnd)
//////////////////////////////////////{
//////////////////////////////////////	WNDCLASSEX wc = { 0 };
//////////////////////////////////////	wc.cbSize = sizeof(WNDCLASSEX);
//////////////////////////////////////	wc.lpfnWndProc = (WNDPROC)DialogProc;
//////////////////////////////////////	wc.hInstance = ghInstance;
//////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////////	wc.lpszClassName = TEXT("DialogClass");
//////////////////////////////////////	RegisterClassEx(&wc);
//////////////////////////////////////}
//////////////////////////////////////
//////////////////////////////////////void CreateDialogBox(HWND hwnd)
//////////////////////////////////////{
//////////////////////////////////////	CreateWindowEx(WS_EX_DLGMODALFRAME | WS_EX_TOPMOST, TEXT("DialogClass"), TEXT("Dialog Box"), WS_VISIBLE | WS_SYSMENU | WS_CAPTION, 100, 100, 200, 150, NULL, NULL, ghInstance, NULL);
//////////////////////////////////////}
////////////////////////////////////#include "windows.h"
////////////////////////////////////
////////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////LRESULT CALLBACK PanelProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////////
////////////////////////////////////void RegisterPanel(void);
////////////////////////////////////COLORREF ShowColorDialog(HWND);
////////////////////////////////////
////////////////////////////////////COLORREF gColor = RGB(255, 255, 255);
////////////////////////////////////
////////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
////////////////////////////////////{
////////////////////////////////////	MSG msg;
////////////////////////////////////	WNDCLASS wc = { 0 };
////////////////////////////////////	wc.lpszClassName = TEXT("Color dialog box");
////////////////////////////////////	wc.hInstance = hInstance;
////////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////////////	RegisterClass(&wc);
////////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Color dialog box"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 150, 150, 250, 200, 0, 0, hInstance, 0);
////////////////////////////////////
////////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////////////	{
////////////////////////////////////		DispatchMessage(&msg);
////////////////////////////////////	}
////////////////////////////////////	return (int)msg.wParam;
////////////////////////////////////}
////////////////////////////////////
////////////////////////////////////
////////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////{
////////////////////////////////////	static HWND hwndPanel;
////////////////////////////////////	switch (msg)
////////////////////////////////////	{
////////////////////////////////////	case WM_CREATE:
////////////////////////////////////	{
////////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Color"), WS_VISIBLE | WS_CHILD, 20, 30, 80, 25, hwnd, (HMENU)1, NULL, NULL);
////////////////////////////////////					  RegisterPanel();
////////////////////////////////////					  hwndPanel = CreateWindow(TEXT("Panel"), NULL, WS_CHILD | WS_VISIBLE, 130, 30, 80, 80, hwnd, (HMENU)2, NULL, NULL);
////////////////////////////////////					  break;
////////////////////////////////////	}
////////////////////////////////////	case WM_COMMAND:
////////////////////////////////////	{
////////////////////////////////////					   gColor = ShowColorDialog(hwnd);
////////////////////////////////////					   InvalidateRect(hwndPanel, NULL, TRUE);
////////////////////////////////////					   break;
////////////////////////////////////	}
////////////////////////////////////	case WM_DESTROY:
////////////////////////////////////	{
////////////////////////////////////					   PostQuitMessage(0);
////////////////////////////////////					   break;
////////////////////////////////////	}
////////////////////////////////////	}
////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////}
////////////////////////////////////
////////////////////////////////////LRESULT CALLBACK PanelProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////////{
////////////////////////////////////	HDC hdc;
////////////////////////////////////	PAINTSTRUCT ps;
////////////////////////////////////	RECT rect;
////////////////////////////////////
////////////////////////////////////	switch (msg)
////////////////////////////////////	{
////////////////////////////////////	case WM_PAINT:
////////////////////////////////////	{
////////////////////////////////////					 GetClientRect(hwnd, &rect);
////////////////////////////////////					 hdc = BeginPaint(hwnd, &ps);
////////////////////////////////////					 SetBkColor(hdc, gColor);
////////////////////////////////////					 ExtTextOut(hdc, 0, 0, ETO_OPAQUE, &rect, TEXT(""), 0, NULL);
////////////////////////////////////					 EndPaint(hwnd, &ps);
////////////////////////////////////					 break;
////////////////////////////////////	}
////////////////////////////////////	}
////////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////////////////}
////////////////////////////////////
////////////////////////////////////COLORREF ShowColorDialog(HWND hwnd)
////////////////////////////////////{
////////////////////////////////////	CHOOSECOLOR cc;
////////////////////////////////////	static COLORREF crCustClr[16];
////////////////////////////////////	ZeroMemory(&cc, sizeof(cc));
////////////////////////////////////	cc.lStructSize = sizeof(cc);
////////////////////////////////////	cc.hwndOwner = hwnd;
////////////////////////////////////	cc.lpCustColors = (LPDWORD)crCustClr;
////////////////////////////////////	cc.rgbResult = RGB(0, 255, 0);
////////////////////////////////////	cc.Flags = CC_FULLOPEN | CC_RGBINIT;
////////////////////////////////////	ChooseColor(&cc);
////////////////////////////////////
////////////////////////////////////	return cc.rgbResult;
////////////////////////////////////}
////////////////////////////////////
////////////////////////////////////void RegisterPanel(void)
////////////////////////////////////{
////////////////////////////////////	WNDCLASS rwc = { 0 };
////////////////////////////////////	rwc.lpszClassName = TEXT("Panel");
////////////////////////////////////	rwc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
////////////////////////////////////	rwc.lpfnWndProc = PanelProc;
////////////////////////////////////	RegisterClass(&rwc);
////////////////////////////////////}
//////////////////////////////////#include "windows.h"
//////////////////////////////////
//////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////////
//////////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
//////////////////////////////////
//////////////////////////////////	LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////////{
//////////////////////////////////	MSG  msg;
//////////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////////	wc.lpszClassName = TEXT("Buttons");
//////////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////////////////
//////////////////////////////////	RegisterClass(&wc);
//////////////////////////////////	CreateWindow(wc.lpszClassName, TEXT("Buttons"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 150, 150, 230, 150, 0, 0, hInstance, 0);
//////////////////////////////////
//////////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////////	{
//////////////////////////////////		TranslateMessage(&msg);
//////////////////////////////////		DispatchMessage(&msg);
//////////////////////////////////	}
//////////////////////////////////	return (int)msg.wParam;
//////////////////////////////////}
//////////////////////////////////
//////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////////{
//////////////////////////////////	switch (msg)
//////////////////////////////////	{
//////////////////////////////////	case WM_CREATE:
//////////////////////////////////	{
//////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Beep"), WS_VISIBLE | WS_CHILD, 20, 50, 80, 25, hwnd, (HMENU)1, NULL, NULL);
//////////////////////////////////					  CreateWindow(TEXT("button"), TEXT("Quit"), WS_VISIBLE | WS_CHILD, 120, 50, 80, 25, hwnd, (HMENU)2, NULL, NULL);
//////////////////////////////////					  break;
//////////////////////////////////	}
//////////////////////////////////	case WM_COMMAND:
//////////////////////////////////	{
//////////////////////////////////					   if (LOWORD(wParam) == 1)
//////////////////////////////////					   {
//////////////////////////////////						   Beep(400, 500);
//////////////////////////////////					   }
//////////////////////////////////					   if (LOWORD(wParam) == 2)
//////////////////////////////////					   {
//////////////////////////////////						   PostQuitMessage(0);
//////////////////////////////////					   }
//////////////////////////////////					   break;
//////////////////////////////////	}
//////////////////////////////////	case WM_DESTROY:
//////////////////////////////////	{
//////////////////////////////////					   PostQuitMessage(0);
//////////////////////////////////					   break;
//////////////////////////////////	}
//////////////////////////////////	}
//////////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////////}
////////////////////////////////#include "windows.h"
//////////////////////////////// 
////////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR lpCmdLine, int nCmdShow)
////////////////////////////////{
////////////////////////////////    MSG  msg;
////////////////////////////////    WNDCLASSW wc = {0};
////////////////////////////////    wc.lpszClassName = L"Static Control";
////////////////////////////////    wc.hInstance     = hInstance;
////////////////////////////////    wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////////    wc.lpfnWndProc   = WndProc;
////////////////////////////////    wc.hCursor       = LoadCursor(0,IDC_ARROW);
//////////////////////////////// 
////////////////////////////////    RegisterClassW(&wc);
////////////////////////////////    CreateWindowW(wc.lpszClassName, L"Introduce myself", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 420, 270, 0, 0, hInstance, 0);
//////////////////////////////// 
////////////////////////////////    while( GetMessage(&msg, NULL, 0, 0)) 
////////////////////////////////    {
////////////////////////////////        TranslateMessage(&msg);
////////////////////////////////        DispatchMessage(&msg);
////////////////////////////////    }
////////////////////////////////    return (int) msg.wParam;
////////////////////////////////}
//////////////////////////////// 
////////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////////{
////////////////////////////////    static wchar_t *lyrics =  L"Hi all.\n\
////////////////////////////////                                My name's Viet\n\
////////////////////////////////                                I come from Thai Nguyen City\n\
////////////////////////////////                                I graduated from HN University of Technology \n\
////////////////////////////////                                I came to Fsoft";
////////////////////////////////    switch(msg)
////////////////////////////////    {
////////////////////////////////    case WM_CREATE:
////////////////////////////////        CreateWindowW(L"STATIC", lyrics, WS_CHILD | WS_VISIBLE | SS_LEFT, 20, 20, 400, 230, hwnd, (HMENU) 1, NULL, NULL);
////////////////////////////////        break;
////////////////////////////////    case WM_DESTROY:
////////////////////////////////        PostQuitMessage(0);
////////////////////////////////        break;
////////////////////////////////    }
////////////////////////////////    return DefWindowProcW(hwnd, msg, wParam, lParam);
////////////////////////////////}
//////////////////////////////#include "windows.h"
//////////////////////////////
//////////////////////////////#define ID_BLUE 1
//////////////////////////////#define ID_YELLOW 2
//////////////////////////////#define ID_ORANGE 3
//////////////////////////////
//////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////////
//////////////////////////////HINSTANCE g_hinst;
//////////////////////////////COLORREF g_color;
//////////////////////////////
//////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////////{
//////////////////////////////	HWND hwnd;
//////////////////////////////	MSG  msg;
//////////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////////	wc.lpszClassName = TEXT("GroupBox");
//////////////////////////////	wc.hInstance = hInstance;
//////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////////////	g_hinst = hInstance;
//////////////////////////////	RegisterClass(&wc);
//////////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("GroupBox"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 300, 170, 0, 0, hInstance, 0);
//////////////////////////////
//////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////////	{
//////////////////////////////		DispatchMessage(&msg);
//////////////////////////////	}
//////////////////////////////	return (int)msg.wParam;
//////////////////////////////}
//////////////////////////////
//////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////////{
//////////////////////////////	HDC hdc;
//////////////////////////////	PAINTSTRUCT ps;
//////////////////////////////	HBRUSH hBrush, holdBrush;
//////////////////////////////	HPEN hPen, holdPen;
//////////////////////////////
//////////////////////////////	switch (msg)
//////////////////////////////	{
//////////////////////////////	case WM_CREATE:
//////////////////////////////		CreateWindow(TEXT("button"), TEXT("Choose Color"), WS_CHILD | WS_VISIBLE | BS_GROUPBOX, 10, 10, 120, 110, hwnd, (HMENU)0, g_hinst, NULL);
//////////////////////////////
//////////////////////////////		CreateWindow(TEXT("button"), TEXT("Blue"), WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON, 20, 30, 100, 30, hwnd, (HMENU)ID_BLUE, g_hinst, NULL);
//////////////////////////////
//////////////////////////////		CreateWindow(TEXT("button"), TEXT("Yellow"), WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON, 20, 55, 100, 30, hwnd, (HMENU)ID_YELLOW, g_hinst, NULL);
//////////////////////////////
//////////////////////////////		CreateWindow(TEXT("button"), TEXT("Orange"), WS_CHILD | WS_VISIBLE | BS_AUTORADIOBUTTON, 20, 80, 100, 30, hwnd, (HMENU)ID_ORANGE, g_hinst, NULL);
//////////////////////////////		break;
//////////////////////////////	case WM_COMMAND:
//////////////////////////////		if (HIWORD(wParam) == BN_CLICKED)
//////////////////////////////		{
//////////////////////////////			switch (LOWORD(wParam))
//////////////////////////////			{
//////////////////////////////			case ID_BLUE:
//////////////////////////////				g_color = RGB(0, 76, 255);
//////////////////////////////				break;
//////////////////////////////			case ID_YELLOW:
//////////////////////////////				g_color = RGB(255, 255, 0);
//////////////////////////////				break;
//////////////////////////////			case ID_ORANGE:
//////////////////////////////				g_color = RGB(255, 123, 0);
//////////////////////////////				break;
//////////////////////////////			}
//////////////////////////////			InvalidateRect(hwnd, NULL, TRUE);
//////////////////////////////		}
//////////////////////////////		break;
//////////////////////////////	case WM_PAINT:
//////////////////////////////		hdc = BeginPaint(hwnd, &ps);
//////////////////////////////		hBrush = CreateSolidBrush(g_color);
//////////////////////////////		hPen = CreatePen(PS_NULL, 1, RGB(0, 0, 0));
//////////////////////////////		holdPen = (HPEN)SelectObject(hdc, hPen);
//////////////////////////////		holdBrush = (HBRUSH)SelectObject(hdc, hBrush);
//////////////////////////////		Rectangle(hdc, 160, 20, 260, 120);
//////////////////////////////		SelectObject(hdc, holdBrush);
//////////////////////////////		SelectObject(hdc, holdPen);
//////////////////////////////		DeleteObject(hPen);
//////////////////////////////		DeleteObject(hBrush);
//////////////////////////////		EndPaint(hwnd, &ps);
//////////////////////////////		break;
//////////////////////////////	case WM_DESTROY:
//////////////////////////////		PostQuitMessage(0);
//////////////////////////////		break;
//////////////////////////////	}
//////////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////////}
////////////////////////////#include "windows.h"
////////////////////////////#include "commctrl.h"
////////////////////////////
////////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////////void CreateControls(HWND hwnd);
////////////////////////////void UpdateLabel(void);
////////////////////////////
////////////////////////////HWND hTrack;
////////////////////////////HWND hlbl;
////////////////////////////
////////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR lpCmdLine, int nCmdShow){
////////////////////////////	HWND hwnd;
////////////////////////////	MSG  msg;
////////////////////////////	WNDCLASSW wc = { 0 };
////////////////////////////	wc.lpszClassName = L"Trackbar";
////////////////////////////	wc.hInstance = hInstance;
////////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////////////////////
////////////////////////////	RegisterClassW(&wc);
////////////////////////////	hwnd = CreateWindowW(wc.lpszClassName, L"Trackbar", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 350, 180, 0, 0, hInstance, 0);
////////////////////////////
////////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////////	{
////////////////////////////		TranslateMessage(&msg);
////////////////////////////		DispatchMessage(&msg);
////////////////////////////	}
////////////////////////////	return (int)msg.wParam;
////////////////////////////}
////////////////////////////
////////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////////{
////////////////////////////	switch (msg)
////////////////////////////	{
////////////////////////////	case WM_CREATE:
////////////////////////////		CreateControls(hwnd);
////////////////////////////		break;
////////////////////////////	case WM_HSCROLL:
////////////////////////////		UpdateLabel();
////////////////////////////		break;
////////////////////////////	case WM_DESTROY:
////////////////////////////		PostQuitMessage(0);
////////////////////////////		break;
////////////////////////////	}
////////////////////////////	return DefWindowProcW(hwnd, msg, wParam, lParam);
////////////////////////////}
////////////////////////////
////////////////////////////void CreateControls(HWND hwnd)
////////////////////////////{
////////////////////////////	HWND hLeftLabel = CreateWindowW(L"STATIC", L"0", WS_CHILD | WS_VISIBLE, 0, 0, 10, 30, hwnd, (HMENU)1, NULL, NULL);
////////////////////////////	HWND hRightLabel = CreateWindowW(L"STATIC", L"100", WS_CHILD | WS_VISIBLE, 0, 0, 30, 30, hwnd, (HMENU)2, NULL, NULL);
////////////////////////////	hlbl = CreateWindowW(L"STATIC", L"0", WS_CHILD | WS_VISIBLE, 270, 20, 30, 30, hwnd, (HMENU)3, NULL, NULL);
////////////////////////////	INITCOMMONCONTROLSEX icex;
////////////////////////////	icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
////////////////////////////	icex.dwICC = ICC_LISTVIEW_CLASSES;
////////////////////////////	InitCommonControlsEx(&icex);
////////////////////////////
////////////////////////////	hTrack = CreateWindowW(L"msctls_trackbar32", L"Trackbar Control", WS_CHILD | WS_VISIBLE | TBS_AUTOTICKS,
////////////////////////////		20, 20, 170, 30, hwnd, (HMENU)3, NULL, NULL);
////////////////////////////	SendMessageW(hTrack, TBM_SETRANGE, TRUE, MAKELONG(0, 100));
////////////////////////////	SendMessageW(hTrack, TBM_SETPAGESIZE, 0, 10);
////////////////////////////	SendMessageW(hTrack, TBM_SETTICFREQ, 10, 0);
////////////////////////////	SendMessageW(hTrack, TBM_SETPOS, FALSE, 0);
////////////////////////////	SendMessageW(hTrack, TBM_SETBUDDY, TRUE, (LPARAM)hLeftLabel);
////////////////////////////	SendMessageW(hTrack, TBM_SETBUDDY, FALSE, (LPARAM)hRightLabel);
////////////////////////////}
////////////////////////////
////////////////////////////void UpdateLabel(void)
////////////////////////////{
////////////////////////////	LRESULT pos = SendMessageW(hTrack, TBM_GETPOS, 0, 0);
////////////////////////////	wchar_t buf[4];
////////////////////////////	wsprintfW(buf, L"%ld", pos);
////////////////////////////	SetWindowTextW(hlbl, buf);
////////////////////////////}
//////////////////////////#include <windows.h>
//////////////////////////#include <commctrl.h>
//////////////////////////
//////////////////////////#define ID_BUTTON 1
//////////////////////////#define ID_TIMER 2
//////////////////////////
//////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////////HINSTANCE g_hinst;
//////////////////////////
//////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////////{
//////////////////////////	HWND hwnd;
//////////////////////////	MSG  msg;
//////////////////////////	WNDCLASS wc = { 0 };
//////////////////////////	wc.lpszClassName = TEXT("Application");
//////////////////////////	wc.hInstance = hInstance;
//////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////////	g_hinst = hInstance;
//////////////////////////
//////////////////////////	RegisterClass(&wc);
//////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Progress bar"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 260, 170, 0, 0, hInstance, 0);
//////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////////	{
//////////////////////////		DispatchMessage(&msg);
//////////////////////////	}
//////////////////////////	return (int)msg.wParam;
//////////////////////////}
//////////////////////////
//////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////////{
//////////////////////////	static HWND hwndPrgBar;
//////////////////////////	static int i = 1;
//////////////////////////	INITCOMMONCONTROLSEX InitCtrlEx;
//////////////////////////	InitCtrlEx.dwSize = sizeof(INITCOMMONCONTROLSEX);
//////////////////////////	InitCtrlEx.dwICC = ICC_PROGRESS_CLASS;
//////////////////////////	InitCommonControlsEx(&InitCtrlEx);
//////////////////////////
//////////////////////////	switch (msg)
//////////////////////////	{
//////////////////////////	case WM_CREATE:
//////////////////////////		hwndPrgBar = CreateWindowEx(0, PROGRESS_CLASS, NULL, WS_CHILD | WS_VISIBLE | PBS_SMOOTH, 30, 20, 190, 25, hwnd, NULL, g_hinst, NULL);
//////////////////////////		CreateWindow(TEXT("button"), TEXT("Start"), WS_CHILD | WS_VISIBLE, 85, 90, 80, 25, hwnd, (HMENU)1, g_hinst, NULL);
//////////////////////////		SendMessage(hwndPrgBar, PBM_SETRANGE, 0, MAKELPARAM(0, 150));
//////////////////////////		SendMessage(hwndPrgBar, PBM_SETSTEP, 1, 0);
//////////////////////////		break;
//////////////////////////	case WM_TIMER:
//////////////////////////		SendMessage(hwndPrgBar, PBM_STEPIT, 0, 0);
//////////////////////////		i++;
//////////////////////////		if (i == 150)
//////////////////////////			KillTimer(hwnd, ID_TIMER);
//////////////////////////		break;
//////////////////////////	case WM_COMMAND:
//////////////////////////		i = 1;
//////////////////////////		SendMessage(hwndPrgBar, PBM_SETPOS, 0, 0);
//////////////////////////		SetTimer(hwnd, ID_TIMER, 5, NULL);
//////////////////////////		break;
//////////////////////////	case WM_DESTROY:
//////////////////////////		KillTimer(hwnd, ID_TIMER);
//////////////////////////		PostQuitMessage(0);
//////////////////////////		break;
//////////////////////////	}
//////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
//////////////////////////}
////////////////////////#include "windows.h"
////////////////////////#include "commctrl.h"
////////////////////////
////////////////////////#define ID_TREEVIEW 100
////////////////////////
////////////////////////HINSTANCE g_hinst;
////////////////////////
////////////////////////HWND CreateATreeView(HWND hwndParent);
////////////////////////HTREEITEM AddItemToTree(HWND hwndTV, LPTSTR lpszItem, int nLevel);
////////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////////
////////////////////////// Ham Winmain()
////////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
////////////////////////{
////////////////////////	MSG  msg;
////////////////////////	HWND hwnd;
////////////////////////	WNDCLASS wc;
////////////////////////	wc.style = CS_HREDRAW | CS_VREDRAW;
////////////////////////	wc.cbClsExtra = 0;
////////////////////////	wc.cbWndExtra = 0;
////////////////////////	wc.lpszClassName = TEXT("TreeView");
////////////////////////	wc.hInstance = hInstance;
////////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////////	wc.lpszMenuName = NULL;
////////////////////////	wc.lpfnWndProc = WndProc;
////////////////////////	wc.hCursor = LoadCursor(NULL, IDC_ARROW);
////////////////////////	wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
////////////////////////
////////////////////////	RegisterClass(&wc);
////////////////////////	// Create parent window
////////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Menu"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 250, 350, NULL, NULL, hInstance, NULL);
////////////////////////	ShowWindow(hwnd, nCmdShow);
////////////////////////	UpdateWindow(hwnd);   // Update windows
////////////////////////
////////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////////	{
////////////////////////		DispatchMessage(&msg);
////////////////////////	}
////////////////////////	return (int)msg.wParam;
////////////////////////}
////////////////////////
////////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////////{
////////////////////////	switch (msg)
////////////////////////	{
////////////////////////	case WM_CREATE:
////////////////////////	{
////////////////////////					  HWND hwndTreeview;
////////////////////////					  hwndTreeview = CreateATreeView(hwnd);
////////////////////////					  AddItemToTree(hwndTreeview, L"Drink", 1);
////////////////////////					  AddItemToTree(hwndTreeview, L"Orange juice", 2);
////////////////////////					  AddItemToTree(hwndTreeview, L"Price: 20K", 3);
////////////////////////					  AddItemToTree(hwndTreeview, L"Coffee", 2);
////////////////////////					  AddItemToTree(hwndTreeview, L"Price: 25K", 3);
////////////////////////					  AddItemToTree(hwndTreeview, L"Tea", 2);
////////////////////////					  AddItemToTree(hwndTreeview, L"Price: 15K", 3);
////////////////////////					  break;
////////////////////////	}
////////////////////////	case WM_DESTROY:
////////////////////////	{
////////////////////////					   PostQuitMessage(0);
////////////////////////					   return 0;
////////////////////////	}
////////////////////////	}
////////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////////}
////////////////////////
////////////////////////// Ham tao treeview
////////////////////////HWND CreateATreeView(HWND hwndParent)
////////////////////////{
////////////////////////	RECT rcClient;  // dimensions of client area
////////////////////////	HWND hwndTV;    // handle to tree-view control
////////////////////////
////////////////////////	// Ensure that the common control DLL is loaded.
////////////////////////	InitCommonControls();
////////////////////////
////////////////////////	// Get the dimensions of the parent window's client area, and create
////////////////////////	// the tree-view control.
////////////////////////	GetClientRect(hwndParent, &rcClient);
////////////////////////	hwndTV = CreateWindowEx(0, WC_TREEVIEW, TEXT("Tree View"), WS_VISIBLE | WS_CHILD | WS_BORDER | TVS_HASLINES, 0, 0, rcClient.right, rcClient.bottom, hwndParent, (HMENU)ID_TREEVIEW, g_hInst, NULL);
////////////////////////	return hwndTV;
////////////////////////}
////////////////////////
////////////////////////HTREEITEM AddItemToTree(HWND hwndTV, LPTSTR lpszItem, int nLevel)
////////////////////////{
////////////////////////	TVITEM tvi;
////////////////////////	TVINSERTSTRUCT tvins;
////////////////////////	static HTREEITEM hPrev = (HTREEITEM)TVI_FIRST;
////////////////////////	static HTREEITEM hPrevRootItem = NULL;
////////////////////////	static HTREEITEM hPrevLev2Item = NULL;
////////////////////////	HTREEITEM hti;
////////////////////////
////////////////////////	tvi.mask = TVIF_TEXT | TVIF_IMAGE | TVIF_SELECTEDIMAGE | TVIF_PARAM;
////////////////////////
////////////////////////	// Set the text of the item.
////////////////////////	tvi.pszText = lpszItem;
////////////////////////	tvi.cchTextMax = sizeof(tvi.pszText) / sizeof(tvi.pszText[0]);
////////////////////////
////////////////////////	// Assume the item is not a parent item, so give it a
////////////////////////	// document image.
////////////////////////	tvi.iImage = 0;
////////////////////////	tvi.iSelectedImage = 0;
////////////////////////
////////////////////////	// Save the heading level in the item's application-defined
////////////////////////	// data area.
////////////////////////	tvi.lParam = (LPARAM)nLevel;
////////////////////////	tvins.item = tvi;
////////////////////////	tvins.hInsertAfter = hPrev;
////////////////////////
////////////////////////	// Set the parent item based on the specified level.
////////////////////////	if (nLevel == 1)
////////////////////////		tvins.hParent = TVI_ROOT;
////////////////////////	else if (nLevel == 2)
////////////////////////		tvins.hParent = hPrevRootItem;
////////////////////////	else
////////////////////////		tvins.hParent = hPrevLev2Item;
////////////////////////
////////////////////////	// Add the item to the tree-view control.
////////////////////////	hPrev = (HTREEITEM)SendMessage(hwndTV, TVM_INSERTITEM, 0, (LPARAM)(LPTVINSERTSTRUCT)&tvins);
////////////////////////
////////////////////////	if (hPrev == NULL)
////////////////////////		return NULL;
////////////////////////
////////////////////////	// Save the handle to the item.
////////////////////////	if (nLevel == 1)
////////////////////////		hPrevRootItem = hPrev;
////////////////////////	else if (nLevel == 2)
////////////////////////		hPrevLev2Item = hPrev;
////////////////////////
////////////////////////	// The new item is a child item. Give the parent item a
////////////////////////	// closed folder bitmap to indicate it now has child items.
////////////////////////	if (nLevel > 1)
////////////////////////	{
////////////////////////		hti = TreeView_GetParent(hwndTV, hPrev);
////////////////////////		tvi.mask = TVIF_IMAGE | TVIF_SELECTEDIMAGE;
////////////////////////		tvi.hItem = hti;
////////////////////////		tvi.iImage = 0;
////////////////////////		tvi.iSelectedImage = 0;
////////////////////////		TreeView_SetItem(hwndTV, &tvi);
////////////////////////	}
////////////////////////	return hPrev;
////////////////////////}#include "windows.h"
//////////////////////#include "strsafe.h"
//////////////////////
//////////////////////#define IDC_LIST 1
//////////////////////#define IDC_STATIC 2
//////////////////////
//////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////////
//////////////////////HINSTANCE g_hinst;
//////////////////////
//////////////////////typedef struct
//////////////////////{
//////////////////////	TCHAR name[30];
//////////////////////	TCHAR role[20];
//////////////////////} Friends;
//////////////////////
//////////////////////Friends friends[] =
//////////////////////{
//////////////////////	{ TEXT("vncoding"), TEXT("Admin") },
//////////////////////	{ TEXT("vhnhan01"), TEXT("member") },
//////////////////////	{ TEXT("thanhx175"), TEXT("member") },
//////////////////////	{ TEXT("tienle"), TEXT("member") },
//////////////////////	{ TEXT("hoanghoa"), TEXT("member") },
//////////////////////};
//////////////////////
//////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////////{
//////////////////////	MSG msg;
//////////////////////	WNDCLASS wc = { 0 };
//////////////////////	wc.lpszClassName = TEXT("Application");
//////////////////////	wc.hInstance = hInstance;
//////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////////	wc.lpfnWndProc = WndProc;
//////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////////	g_hinst = hInstance;
//////////////////////
//////////////////////	RegisterClass(&wc);
//////////////////////	CreateWindow(wc.lpszClassName, TEXT("List Box"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 340, 200, 0, 0, hInstance, 0);
//////////////////////
//////////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////////	{
//////////////////////		TranslateMessage(&msg);
//////////////////////		DispatchMessage(&msg);
//////////////////////	}
//////////////////////	return (int)msg.wParam;
//////////////////////}
//////////////////////
//////////////////////
//////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////////{
//////////////////////	static HWND hwndList, hwndStatic;
//////////////////////	int i, sel;
//////////////////////	TCHAR buff[100];
//////////////////////
//////////////////////	switch (msg)
//////////////////////	{
//////////////////////	case WM_CREATE:
//////////////////////		hwndList = CreateWindow(TEXT("listbox"), NULL, WS_CHILD | WS_VISIBLE | LBS_NOTIFY, 10, 10, 150, 120, hwnd, (HMENU)IDC_LIST, g_hinst, NULL);
//////////////////////
//////////////////////		hwndStatic = CreateWindow(TEXT("static"), NULL, WS_CHILD | WS_VISIBLE, 200, 10, 120, 45, hwnd, (HMENU)IDC_STATIC, g_hinst, NULL);
//////////////////////
//////////////////////		for (i = 0; i < ARRAYSIZE(friends); i++)
//////////////////////		{
//////////////////////			SendMessage(hwndList, LB_ADDSTRING, 0, (LPARAM)friends[i].name);
//////////////////////		}
//////////////////////		break;
//////////////////////	case WM_COMMAND:
//////////////////////		if (LOWORD(wParam) == IDC_LIST)
//////////////////////		{
//////////////////////			if (HIWORD(wParam) == LBN_SELCHANGE)
//////////////////////			{
//////////////////////				sel = (int)SendMessage(hwndList, LB_GETCURSEL, 0, 0);
//////////////////////				StringCbPrintf(buff, ARRAYSIZE(buff), TEXT("Role: %s"), friends[sel].role);
//////////////////////				SetWindowText(hwndStatic, buff);
//////////////////////			}
//////////////////////		}
//////////////////////		break;
//////////////////////
//////////////////////	case WM_DESTROY:
//////////////////////		PostQuitMessage(0);
//////////////////////		break;
//////////////////////	}
//////////////////////	return (DefWindowProc(hwnd, msg, wParam, lParam));
//////////////////////}
////////////////////#include <windows.h>
////////////////////
////////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////////
////////////////////HINSTANCE g_hinst;
////////////////////
////////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
////////////////////	LPSTR lpCmdLine, int nCmdShow)
////////////////////{
////////////////////	HWND hwnd;
////////////////////	MSG msg;
////////////////////	WNDCLASS wc = { 0 };
////////////////////	wc.lpszClassName = TEXT("Application");
////////////////////	wc.hInstance = hInstance;
////////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////////	wc.lpfnWndProc = WndProc;
////////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////////////
////////////////////	g_hinst = hInstance;
////////////////////
////////////////////	RegisterClass(&wc);
////////////////////	hwnd = CreateWindow(wc.lpszClassName, TEXT("Combo Box"),
////////////////////		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
////////////////////		100, 100, 270, 170, 0, 0, hInstance, 0);
////////////////////
////////////////////
////////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////////	{
////////////////////		DispatchMessage(&msg);
////////////////////	}
////////////////////	return (int)msg.wParam;
////////////////////}
////////////////////
////////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////////{
////////////////////	static HWND hwndCombo, hwndStatic;
////////////////////	const TCHAR *items[] = { TEXT("C/C++"), TEXT("C#"), TEXT("Java"), TEXT("Python") };
////////////////////	int i;
////////////////////	LRESULT sel = 0;
////////////////////
////////////////////	switch (msg)
////////////////////	{
////////////////////	case WM_CREATE:
////////////////////		hwndCombo = CreateWindow(TEXT("combobox"), NULL,
////////////////////			WS_CHILD | WS_VISIBLE | CBS_DROPDOWN,
////////////////////			10, 10, 120, 110, hwnd, NULL, g_hinst, NULL);
////////////////////
////////////////////		CreateWindow(TEXT("button"), TEXT("Drop down"),
////////////////////			WS_CHILD | WS_VISIBLE,
////////////////////			150, 10, 90, 25, hwnd, (HMENU)1, g_hinst, NULL);
////////////////////
////////////////////		hwndStatic = CreateWindow(TEXT("static"), TEXT(""),
////////////////////			WS_CHILD | WS_VISIBLE,
////////////////////			150, 80, 90, 25, hwnd, NULL, g_hinst, NULL);
////////////////////
////////////////////		for (i = 0; i < 4; i++)
////////////////////		{
////////////////////			SendMessage(hwndCombo, CB_ADDSTRING, 0, (LPARAM)items[i]);
////////////////////		}
////////////////////		break;
////////////////////	case WM_COMMAND:
////////////////////		if (HIWORD(wParam) == BN_CLICKED)
////////////////////		{
////////////////////			SendMessage(hwndCombo, CB_SHOWDROPDOWN, (WPARAM)TRUE, 0);
////////////////////		}
////////////////////		if (HIWORD(wParam) == CBN_SELCHANGE)
////////////////////		{
////////////////////			sel = SendMessage(hwndCombo, CB_GETCURSEL, 0, 0);
////////////////////			SetWindowText(hwndStatic, items[sel]);
////////////////////			SetFocus(hwnd);
////////////////////		}
////////////////////		break;
////////////////////	case WM_DESTROY:
////////////////////		PostQuitMessage(0);
////////////////////		break;
////////////////////	}
////////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////////}
//////////////////#include "windows.h"
//////////////////#include "commctrl.h"
//////////////////
//////////////////#define ID_TABCTRL 1
//////////////////#define EDIT 2
//////////////////#define BTN_ADD 3
//////////////////#define BTN_DEL 4
//////////////////#define BTN_DELALL 5
//////////////////
//////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////////HWND hTab, hEdit;
//////////////////HINSTANCE g_hinst;
//////////////////
//////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
//////////////////{
//////////////////	MSG msg;
//////////////////	WNDCLASS wc = { 0 };
//////////////////	wc.lpszClassName = TEXT("Application");
//////////////////	wc.hInstance = hInstance;
//////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////////	wc.lpfnWndProc = WndProc;
//////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////////
//////////////////	g_hinst = hInstance;
//////////////////
//////////////////	RegisterClass(&wc);
//////////////////	CreateWindow(wc.lpszClassName, TEXT("Tab Control"), WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 380, 230, 0, 0, hInstance, 0);
//////////////////
//////////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////////	{
//////////////////		TranslateMessage(&msg);
//////////////////		DispatchMessage(&msg);
//////////////////	}
//////////////////	return (int)msg.wParam;
//////////////////}
//////////////////
//////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////////{
//////////////////	TCITEM tie;
//////////////////	TCHAR text[250];
//////////////////	LRESULT count, id;
//////////////////	INITCOMMONCONTROLSEX icex;
//////////////////
//////////////////	switch (msg)
//////////////////	{
//////////////////	case WM_CREATE:
//////////////////		icex.dwSize = sizeof(INITCOMMONCONTROLSEX);
//////////////////		icex.dwICC = ICC_TAB_CLASSES;
//////////////////		InitCommonControlsEx(&icex);
//////////////////		hTab = CreateWindow(WC_TABCONTROL, NULL, WS_CHILD | WS_VISIBLE, 0, 0, 200, 150, hwnd, (HMENU)ID_TABCTRL, g_hinst, NULL);
//////////////////		hEdit = CreateWindow(L"edit", NULL, WS_CHILD | WS_VISIBLE | WS_BORDER, 250, 20, 100, 25, hwnd, (HMENU)EDIT, g_hinst, NULL);
//////////////////
//////////////////		CreateWindow(L"button", L"Add", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON, 250, 50, 100, 25, hwnd, (HMENU)BTN_ADD, g_hinst, NULL);
//////////////////
//////////////////		CreateWindow(L"button", L"Del", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON, 250, 80, 100, 25, hwnd, (HMENU)BTN_DEL, g_hinst, NULL);
//////////////////
//////////////////		CreateWindow(L"button", L"Delall", WS_CHILD | WS_VISIBLE | BS_PUSHBUTTON, 250, 110, 100, 25, hwnd, (HMENU)BTN_DELALL, g_hinst, NULL);
//////////////////		break;
//////////////////	case WM_COMMAND:
//////////////////		switch (LOWORD(wParam))
//////////////////		{
//////////////////		case BTN_ADD:
//////////////////			GetWindowText(hEdit, text, 250);
//////////////////			if (lstrlen(text) != 0)
//////////////////			{
//////////////////				tie.mask = TCIF_TEXT;
//////////////////				tie.pszText = text;
//////////////////				count = SendMessage(hTab, TCM_GETITEMCOUNT, 0, 0);
//////////////////				SendMessage(hTab, TCM_INSERTITEM, count, (LPARAM)(LPTCITEM)&tie);
//////////////////			}
//////////////////			break;
//////////////////		case BTN_DEL:
//////////////////			id = SendMessage(hTab, TCM_GETCURSEL, 0, 0);
//////////////////			if (id != -1)
//////////////////			{
//////////////////				SendMessage(hTab, TCM_DELETEITEM, 0, id);
//////////////////			}
//////////////////			break;
//////////////////		case BTN_DELALL:
//////////////////			SendMessage(hTab, TCM_DELETEALLITEMS, 0, 0);
//////////////////			break;
//////////////////		}
//////////////////		break;
//////////////////		case WM_DESTROY:
//////////////////		PostQuitMessage(0);
//////////////////		break;
//////////////////	}
//////////////////	return(DefWindowProc(hwnd, msg, wParam, lParam));
//////////////////}
////////////////#include "windows.h"
////////////////#include "commctrl.h"
////////////////
////////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////////void CreateMyTooltip(HWND);
////////////////HINSTANCE g_hInst;
////////////////int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
////////////////{
////////////////	MSG msg;
////////////////	WNDCLASS wc = { 0 };
////////////////	wc.lpszClassName = L"Tooltip";
////////////////	wc.hInstance = hInstance;
////////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////////	wc.lpfnWndProc = WndProc;
////////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////////
////////////////	RegisterClass(&wc);
////////////////	CreateWindow(wc.lpszClassName, L"Tooltip", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 200, 150, 0, 0, hInstance, 0);
////////////////
////////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////////	{
////////////////		TranslateMessage(&msg);
////////////////		DispatchMessage(&msg);
////////////////	}
////////////////	return (int)msg.wParam;
////////////////}
////////////////
////////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////////{
////////////////	switch (msg)
////////////////	{
////////////////	case WM_CREATE:
////////////////		CreateMyTooltip(hwnd);
////////////////		break;
////////////////	case WM_DESTROY:
////////////////		PostQuitMessage(0);
////////////////		break;
////////////////	}
////////////////	return DefWindowProc(hwnd, msg, wParam, lParam);
////////////////}
////////////////
////////////////void CreateMyTooltip(HWND hwnd)
////////////////{
////////////////	HWND hwndTT = CreateWindowEx(WS_EX_TOPMOST, TOOLTIPS_CLASS, NULL, WS_POPUP | TTS_NOPREFIX | TTS_ALWAYSTIP, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, hwnd, NULL, g_hInst, NULL);
////////////////
////////////////	SetWindowPos(hwndTT, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);
////////////////
////////////////	// Set up "tool" information. In this case, the "tool" is the entire parent window.
////////////////	TOOLINFO ti = { 0 };
////////////////	ti.cbSize = sizeof(TOOLINFO)-4;
////////////////	ti.uFlags = TTF_SUBCLASS;
////////////////	ti.hwnd = hwnd;
////////////////	ti.hinst = g_hInst;
////////////////	ti.lpszText = TEXT("This is your tooltip string.");;
////////////////
////////////////	GetClientRect(hwnd, &ti.rect);
////////////////
////////////////	// Associate the tooltip with the "tool" window.
////////////////	SendMessage(hwndTT, TTM_ADDTOOL, 0, (LPARAM)(LPTOOLINFO)&ti);
////////////////}
//////////////#include "windows.h"
//////////////#include "commctrl.h"
//////////////#include "wchar.h"
//////////////
//////////////LRESULT CALLBACK PanelProc(HWND, UINT, WPARAM, LPARAM);
//////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////////
//////////////HINSTANCE g_hinst;
//////////////LRESULT g_pos = 150;
//////////////
//////////////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
//////////////	PWSTR lpCmdLine, int nCmdShow)
//////////////{
//////////////	HWND hwnd;
//////////////	MSG msg;
//////////////	WNDCLASSW wc = { 0 };
//////////////
//////////////	wc.lpszClassName = L"Application";
//////////////	wc.hInstance = hInstance;
//////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////////	wc.lpfnWndProc = WndProc;
//////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////
//////////////	g_hinst = hInstance;
//////////////
//////////////	RegisterClassW(&wc);
//////////////	hwnd = CreateWindowW(wc.lpszClassName, L"Burning control", WS_OVERLAPPEDWINDOW | WS_VISIBLE | WS_CLIPCHILDREN, 100, 100, 400, 250, 0, 0, hInstance, 0);
//////////////
//////////////	while (GetMessage(&msg, NULL, 0, 0))
//////////////	{
//////////////		DispatchMessage(&msg);
//////////////	}
//////////////	return (int)msg.wParam;
//////////////}
//////////////
//////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////{
//////////////	static HWND hwndTrack, hwndBurn;
//////////////	WNDCLASSW rwc = { 0 };
//////////////
//////////////	INITCOMMONCONTROLSEX InitCtrlEx;
//////////////
//////////////	InitCtrlEx.dwSize = sizeof(INITCOMMONCONTROLSEX);
//////////////	InitCtrlEx.dwICC = ICC_BAR_CLASSES;
//////////////	InitCommonControlsEx(&InitCtrlEx);
//////////////
//////////////	switch (msg)
//////////////	{
//////////////	case WM_CREATE:
//////////////		rwc.lpszClassName = L"BurningControl";
//////////////		rwc.hbrBackground = GetSysColorBrush(COLOR_BTNFACE);
//////////////		rwc.style = CS_HREDRAW;
//////////////		rwc.lpfnWndProc = PanelProc;
//////////////		rwc.hCursor = LoadCursor(0, IDC_ARROW);
//////////////		RegisterClassW(&rwc);
//////////////
//////////////		hwndBurn = CreateWindowExW(WS_EX_STATICEDGE, L"BurningControl", NULL, WS_CHILD | WS_VISIBLE, 0, 330, 490, 30, hwnd, (HMENU)1, NULL, NULL);
//////////////
//////////////		hwndTrack = CreateWindowExW(0, TRACKBAR_CLASSW, NULL, WS_CHILD | WS_VISIBLE | TBS_FIXEDLENGTH | TBS_NOTICKS, 40, 25, 150, 25, hwnd, (HMENU)2, g_hinst, NULL);
//////////////
//////////////		SendMessage(hwndTrack, TBM_SETRANGE, TRUE, MAKELONG(0, 750));
//////////////		SendMessage(hwndTrack, TBM_SETPAGESIZE, 0, 20);
//////////////		SendMessage(hwndTrack, TBM_SETTICFREQ, 20, 0);
//////////////		SendMessage(hwndTrack, TBM_SETPOS, TRUE, 150);
//////////////		break;
//////////////
//////////////	case WM_SIZE:
//////////////		SetWindowPos(hwndBurn, NULL, 0, HIWORD(lParam) - 30, LOWORD(lParam), 30, SWP_NOZORDER);
//////////////		break;
//////////////	case WM_HSCROLL:
//////////////		g_pos = SendMessage(hwndTrack, TBM_GETPOS, 0, 0);
//////////////		InvalidateRect(hwndBurn, NULL, TRUE);
//////////////		break;
//////////////	case WM_DESTROY:
//////////////		PostQuitMessage(0);
//////////////		break;
//////////////	}
//////////////	return DefWindowProcW(hwnd, msg, wParam, lParam);
//////////////}
//////////////
//////////////
//////////////LRESULT CALLBACK PanelProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////////{
//////////////	HBRUSH hBrushYellow, hBrushRed, holdBrush;
//////////////	HPEN hPen, holdPen;
//////////////	HFONT hFont, holdFont;
//////////////	PAINTSTRUCT ps;
//////////////	RECT rect, rect2;
//////////////
//////////////	wchar_t *cap[] = { L"75", L"150", L"225", L"300", L"375", L"450", L"525", L"600", L"675" };
//////////////
//////////////	HDC hdc;
//////////////	int till;
//////////////	int step, full;
//////////////	int i;
//////////////
//////////////	switch (msg)
//////////////	{
//////////////	case WM_PAINT:
//////////////		hdc = BeginPaint(hwnd, &ps);
//////////////		GetClientRect(hwnd, &rect);
//////////////		till = (rect.right / 750.0) * g_pos;
//////////////		step = rect.right / 10.0;
//////////////		full = (rect.right / 750.0) * 700;
//////////////
//////////////		hBrushYellow = CreateSolidBrush(RGB(255, 255, 184));
//////////////		hBrushRed = CreateSolidBrush(RGB(255, 110, 110));
//////////////
//////////////		hPen = CreatePen(PS_NULL, 1, RGB(0, 0, 0));
//////////////		holdPen = (HPEN)SelectObject(hdc, hPen);
//////////////
//////////////		hFont = CreateFontW(13, 0, 0, 0, FW_MEDIUM, 0, 0, 0, 0, 0, 0, 0, 0, L"Tahoma");
//////////////		holdFont = (HFONT)SelectObject(hdc, hFont);
//////////////
//////////////		if (till > full)
//////////////		{
//////////////			SelectObject(hdc, hBrushYellow);
//////////////			Rectangle(hdc, 0, 0, full, 30);
//////////////			holdBrush = (HBRUSH)SelectObject(hdc, hBrushRed);
//////////////			Rectangle(hdc, full, 0, till, 30);
//////////////		}
//////////////		else
//////////////		{
//////////////			holdBrush = (HBRUSH)SelectObject(hdc, hBrushYellow);
//////////////			Rectangle(hdc, 0, 0, till, 30);
//////////////		}
//////////////		SelectObject(hdc, holdPen);
//////////////
//////////////		for (i = 1; i < 10; i++)
//////////////		{
//////////////			MoveToEx(hdc, i*step, 0, NULL);
//////////////			LineTo(hdc, i*step, 7);
//////////////			rect2.bottom = 28;
//////////////			rect2.top = 8;
//////////////			rect2.left = i*step - 10;
//////////////			rect2.right = i*step + 10;
//////////////
//////////////			SetBkMode(hdc, TRANSPARENT);
//////////////			DrawTextW(hdc, cap[i - 1], wcslen(cap[i - 1]), &rect2, DT_CENTER);
//////////////		}
//////////////
//////////////		SelectObject(hdc, holdBrush);
//////////////		DeleteObject(hBrushYellow);
//////////////		DeleteObject(hBrushRed);
//////////////		DeleteObject(hPen);
//////////////
//////////////		SelectObject(hdc, holdFont);
//////////////		DeleteObject(hFont);
//////////////
//////////////		EndPaint(hwnd, &ps);
//////////////		break;
//////////////	}
//////////////
//////////////	return DefWindowProcW(hwnd, msg, wParam, lParam);
//////////////}
////////////#include "windows.h"
////////////
////////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////////void DrawPixels(HWND hwnd);
////////////
////////////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR lpCmdLine, int nCmdShow)
////////////{
////////////	MSG msg;
////////////	WNDCLASSW wc = { 0 };
////////////
////////////	wc.style = CS_HREDRAW | CS_VREDRAW;
////////////	wc.lpszClassName = L"Pixels";
////////////	wc.hInstance = hInstance;
////////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////////////	wc.lpfnWndProc = WndProc;
////////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////////
////////////	RegisterClassW(&wc);
////////////	CreateWindowW(wc.lpszClassName, L"Pixels", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 250, 150, NULL, NULL, hInstance, NULL);
////////////
////////////	while (GetMessage(&msg, NULL, 0, 0))
////////////	{
////////////		TranslateMessage(&msg);
////////////		DispatchMessage(&msg);
////////////	}
////////////	return (int)msg.wParam;
////////////}
////////////
////////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
////////////{
////////////	switch (msg)
////////////	{
////////////	case WM_PAINT:
////////////		DrawPixels(hwnd);
////////////		break;
////////////	case WM_DESTROY:
////////////		PostQuitMessage(0);
////////////		return 0;
////////////	}
////////////	return DefWindowProcW(hwnd, msg, wParam, lParam);
////////////}
////////////
////////////void DrawPixels(HWND hwnd)
////////////{
////////////	PAINTSTRUCT ps;
////////////	RECT r;
////////////
////////////	HDC hdc = BeginPaint(hwnd, &ps);
////////////	GetClientRect(hwnd, &r);
////////////	for (int i = 0; i<1000; i++)
////////////	{
////////////		int x = (rand() % r.right - r.left);
////////////		int y = (rand() % r.bottom - r.top);
////////////		SetPixel(hdc, x, y, RGB(255, 0, 0));
////////////	}
////////////	EndPaint(hwnd, &ps);
////////////}
//////////#include "windows.h"
//////////
//////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////////
//////////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, PWSTR lpCmdLine, int nCmdShow)
//////////{
//////////	MSG msg;
//////////	WNDCLASSW wc = { 0 };
//////////
//////////	wc.style = CS_HREDRAW | CS_VREDRAW;
//////////	wc.lpszClassName = L"Rectangle";
//////////	wc.hInstance = hInstance;
//////////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////////	wc.lpfnWndProc = WndProc;
//////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////////
//////////	RegisterClassW(&wc);
//////////	CreateWindowW(wc.lpszClassName, L"Rectangle", WS_OVERLAPPEDWINDOW | WS_VISIBLE, 100, 100, 250, 200, NULL, NULL, hInstance, NULL);
//////////
//////////	while (GetMessage(&msg, NULL, 0, 0))
//////////	{
//////////		DispatchMessage(&msg);
//////////	}
//////////
//////////	return (int)msg.wParam;
//////////}
//////////
//////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
//////////{
//////////	HDC hdc;
//////////	PAINTSTRUCT ps;
//////////
//////////	switch (msg)
//////////	{
//////////	case WM_PAINT:
//////////		hdc = BeginPaint(hwnd, &ps);
//////////		Rectangle(hdc, 50, 50, 200, 100);
//////////		EndPaint(hwnd, &ps);
//////////		break;
//////////	case WM_DESTROY:
//////////		PostQuitMessage(0);
//////////		return 0;
//////////	}
//////////	return DefWindowProcW(hwnd, msg, wParam, lParam);
//////////}
////////#include "windows.h"
////////
////////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////////void DrawLines(HWND);
////////
////////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
////////	PWSTR lpCmdLine, int nCmdShow)
////////{
////////	MSG msg;
////////	WNDCLASSW wc = { 0 };
////////
////////	wc.style = CS_HREDRAW | CS_VREDRAW;
////////	wc.lpszClassName = L"Pens";
////////	wc.hInstance = hInstance;
////////	wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);
////////	wc.lpfnWndProc = WndProc;
////////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////////
////////	RegisterClassW(&wc);
////////	CreateWindowW(wc.lpszClassName, L"Pens",
////////		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
////////		100, 100, 250, 180, NULL, NULL, hInstance, NULL);
////////
////////	while (GetMessage(&msg, NULL, 0, 0))
////////	{
////////		DispatchMessage(&msg);
////////	}
////////
////////	return (int)msg.wParam;
////////}
////////
////////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg,
////////	WPARAM wParam, LPARAM lParam)
////////{
////////	switch (msg)
////////	{
////////	case WM_PAINT:
////////		DrawLines(hwnd);
////////		break;
////////	case WM_DESTROY:
////////		PostQuitMessage(0);
////////		return 0;
////////	}
////////	return DefWindowProcW(hwnd, msg, wParam, lParam);
////////}
////////
////////void DrawLines(HWND hwnd)
////////{
////////	PAINTSTRUCT ps;
////////
////////	HDC hdc = BeginPaint(hwnd, &ps);
////////	HPEN hPen1 = CreatePen(PS_SOLID, 1, RGB(0, 0, 0));
////////	HPEN hPen2 = CreatePen(PS_DASH, 1, RGB(0, 0, 0));
////////	HPEN hPen3 = CreatePen(PS_DOT, 1, RGB(0, 0, 0));
////////	HPEN hPen4 = CreatePen(PS_DASHDOT, 1, RGB(0, 0, 0));
////////	HPEN hPen5 = CreatePen(PS_DASHDOTDOT, 1, RGB(0, 0, 0));
////////
////////	SelectObject(hdc, hPen1);
////////	MoveToEx(hdc, 50, 30, NULL);
////////	LineTo(hdc, 200, 30);
////////
////////	SelectObject(hdc, hPen2);
////////	MoveToEx(hdc, 50, 50, NULL);
////////	LineTo(hdc, 200, 50);
////////
////////	SelectObject(hdc, hPen2);
////////	MoveToEx(hdc, 50, 70, NULL);
////////	LineTo(hdc, 200, 70);
////////
////////	SelectObject(hdc, hPen3);
////////	MoveToEx(hdc, 50, 90, NULL);
////////	LineTo(hdc, 200, 90);
////////
////////	SelectObject(hdc, hPen4);
////////	MoveToEx(hdc, 50, 110, NULL);
////////	LineTo(hdc, 200, 110);
////////
////////	DeleteObject(hPen1);
////////	DeleteObject(hPen2);
////////	DeleteObject(hPen3);
////////	DeleteObject(hPen4);
////////	DeleteObject(hPen5);
////////
////////	EndPaint(hwnd, &ps);
////////}
//////#include "windows.h"
//////
//////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//////void DrawRectangles(HWND);
//////
//////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
//////	PWSTR lpCmdLine, int nCmdShow)
//////{
//////	MSG msg;
//////	WNDCLASSW wc = { 0 };
//////
//////	wc.style = CS_HREDRAW | CS_VREDRAW;
//////	wc.lpszClassName = L"Brush";
//////	wc.hInstance = hInstance;
//////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//////	wc.lpfnWndProc = WndProc;
//////	wc.hCursor = LoadCursor(0, IDC_ARROW);
//////
//////	RegisterClassW(&wc);
//////	CreateWindowW(wc.lpszClassName, L"Solid Brush",
//////		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
//////		100, 100, 220, 240, NULL, NULL, hInstance, NULL);
//////
//////	while (GetMessage(&msg, NULL, 0, 0))
//////	{
//////		DispatchMessage(&msg);
//////	}
//////	return (int)msg.wParam;
//////}
//////
//////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg,
//////	WPARAM wParam, LPARAM lParam)
//////{
//////	switch (msg)
//////	{
//////	case WM_PAINT:
//////		DrawRectangles(hwnd);
//////		break;
//////	case WM_DESTROY:
//////		PostQuitMessage(0);
//////		return 0;
//////	}
//////	return DefWindowProcW(hwnd, msg, wParam, lParam);
//////}
//////
//////void DrawRectangles(HWND hwnd)
//////{
//////	PAINTSTRUCT ps;
//////
//////	HDC hdc = BeginPaint(hwnd, &ps);
//////
//////	HBRUSH hBrush1 = CreateSolidBrush(RGB(121, 90, 0));
//////	HBRUSH hBrush2 = CreateSolidBrush(RGB(240, 63, 19));
//////	HBRUSH hBrush3 = CreateSolidBrush(RGB(240, 210, 18));
//////	HBRUSH hBrush4 = CreateSolidBrush(RGB(9, 189, 21));
//////
//////	Rectangle(hdc, 30, 30, 100, 100);
//////	SelectObject(hdc, hBrush2);
//////	Rectangle(hdc, 110, 30, 180, 100);
//////	SelectObject(hdc, hBrush3);
//////	Rectangle(hdc, 30, 110, 100, 180);
//////	SelectObject(hdc, hBrush4);
//////	Rectangle(hdc, 110, 110, 180, 180);
//////
//////	DeleteObject(hBrush1);
//////	DeleteObject(hBrush2);
//////	DeleteObject(hBrush3);
//////	DeleteObject(hBrush4);
//////
//////	EndPaint(hwnd, &ps);
//////}
////#include "windows.h"
////
////LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
////void DrawRectangles(HWND hwnd);
////
////
////int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
////	PWSTR lpCmdLine, int nCmdShow)
////{
////	MSG msg;
////	WNDCLASSW wc = { 0 };
////
////	wc.style = CS_VREDRAW | CS_HREDRAW;
////	wc.lpszClassName = L"Brush";
////	wc.hInstance = hInstance;
////	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
////	wc.lpfnWndProc = WndProc;
////	wc.hCursor = LoadCursor(0, IDC_ARROW);
////
////	RegisterClassW(&wc);
////	CreateWindowW(wc.lpszClassName, L"Hatch brushes",
////		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
////		100, 100, 300, 220, NULL, NULL, hInstance, NULL);
////
////	while (GetMessage(&msg, NULL, 0, 0)) {
////		DispatchMessage(&msg);
////	}
////
////	return (int)msg.wParam;
////}
////
////LRESULT CALLBACK WndProc(HWND hwnd, UINT msg,
////	WPARAM wParam, LPARAM lParam)
////{
////	switch (msg)
////	{
////	case WM_PAINT:
////		DrawRectangles(hwnd);
////		break;
////	case WM_DESTROY:
////		PostQuitMessage(0);
////		return 0;
////	}
////	return DefWindowProcW(hwnd, msg, wParam, lParam);
////}
////
////void DrawRectangles(HWND hwnd)
////{
////	PAINTSTRUCT ps;
////
////	HDC hdc = BeginPaint(hwnd, &ps);
////	HPEN hPen = CreatePen(PS_NULL, 1, RGB(0, 0, 0));
////	HGDIOBJ holdPen = SelectObject(hdc, hPen);
////
////	HBRUSH hBrush1 = CreateHatchBrush(HS_BDIAGONAL, RGB(0, 0, 0));
////	HBRUSH hBrush2 = CreateHatchBrush(HS_FDIAGONAL, RGB(0, 0, 0));
////	HBRUSH hBrush3 = CreateHatchBrush(HS_CROSS, RGB(0, 0, 0));
////	HBRUSH hBrush4 = CreateHatchBrush(HS_HORIZONTAL, RGB(0, 0, 0));
////	HBRUSH hBrush5 = CreateHatchBrush(HS_DIAGCROSS, RGB(0, 0, 0));
////	HBRUSH hBrush6 = CreateHatchBrush(HS_VERTICAL, RGB(0, 0, 0));
////
////	HGDIOBJ holdBrush = SelectObject(hdc, hBrush1);
////
////	DWORD col = GetSysColor(COLOR_BTNFACE);
////	SetBkColor(hdc, col);
////
////	Rectangle(hdc, 30, 30, 100, 80);
////	SelectObject(hdc, hBrush2);
////	Rectangle(hdc, 110, 30, 180, 80);
////	SelectObject(hdc, hBrush3);
////	Rectangle(hdc, 190, 30, 260, 80);
////	SelectObject(hdc, hBrush4);
////	Rectangle(hdc, 30, 110, 100, 160);
////	SelectObject(hdc, hBrush5);
////	Rectangle(hdc, 110, 110, 180, 160);
////	SelectObject(hdc, hBrush6);
////	Rectangle(hdc, 190, 110, 260, 160);
////
////	SelectObject(hdc, holdPen);
////	SelectObject(hdc, holdBrush);
////
////	DeleteObject(hPen);
////	DeleteObject(hBrush1);
////	DeleteObject(hBrush2);
////	DeleteObject(hBrush3);
////	DeleteObject(hBrush4);
////	DeleteObject(hBrush5);
////	DeleteObject(hBrush6);
////
////	EndPaint(hwnd, &ps);
////}
//#include "windows.h"
//
//LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);
//
//int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
//	PWSTR lpCmdLine, int nCmdShow)
//{
//	MSG msg;
//	WNDCLASSW wc = { 0 };
//
//	wc.style = CS_HREDRAW | CS_VREDRAW;
//	wc.lpszClassName = L"Shapes";
//	wc.hInstance = hInstance;
//	wc.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
//	wc.lpfnWndProc = WndProc;
//	wc.hCursor = LoadCursor(0, IDC_ARROW);
//
//	RegisterClassW(&wc);
//	CreateWindowW(wc.lpszClassName, L"Shapes",
//		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
//		100, 100, 390, 230, NULL, NULL, hInstance, NULL);
//
//	while (GetMessage(&msg, NULL, 0, 0))
//	{
//		DispatchMessage(&msg);
//	}
//
//	return (int)msg.wParam;
//}
//
//LRESULT CALLBACK WndProc(HWND hwnd, UINT msg,
//	WPARAM wParam, LPARAM lParam)
//{
//	HDC hdc;
//	PAINTSTRUCT ps;
//	const POINT polygon[10] = { 30, 145, 85, 165, 105, 110, 65, 125, 30, 105 };
//	const POINT bezier[4] = { 280, 160, 320, 160, 325, 110, 350, 110 };
//
//	switch (msg)
//	{
//	case WM_PAINT:
//		hdc = BeginPaint(hwnd, &ps);
//		Ellipse(hdc, 30, 30, 120, 90);
//		RoundRect(hdc, 150, 30, 240, 90, 15, 20);
//		Chord(hdc, 270, 30, 360, 90, 270, 45, 360, 45);
//		Polygon(hdc, polygon, 5);
//		Rectangle(hdc, 150, 110, 230, 160);
//		PolyBezier(hdc, bezier, 4);
//		EndPaint(hwnd, &ps);
//		break;
//	case WM_DESTROY:
//		PostQuitMessage(0);
//		return 0;
//	}
//	return DefWindowProcW(hwnd, msg, wParam, lParam);
//}
#include "windows.h"

LRESULT CALLBACK WndProc(HWND, UINT, WPARAM, LPARAM);

int WINAPI wWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
	PWSTR lpCmdLine, int nCmdShow)
{
	MSG msg;
	WNDCLASSW wc = { 0 };

	wc.style = CS_HREDRAW | CS_VREDRAW;
	wc.lpszClassName = L"Text";
	wc.hInstance = hInstance;
	wc.hbrBackground = GetSysColorBrush(COLOR_BTNFACE);
	wc.lpfnWndProc = WndProc;
	wc.hCursor = LoadCursor(0, IDC_ARROW);

	RegisterClassW(&wc);
	CreateWindowW(wc.lpszClassName, L"GDI-Text",
		WS_OVERLAPPEDWINDOW | WS_VISIBLE,
		100, 100, 390, 350, NULL, NULL, hInstance, NULL);

	while (GetMessage(&msg, NULL, 0, 0)) {
		DispatchMessage(&msg);
	}
	return (int)msg.wParam;
}

LRESULT CALLBACK WndProc(HWND hwnd, UINT msg,
	WPARAM wParam, LPARAM lParam)
{
	HDC hdc;
	PAINTSTRUCT ps;

	DWORD color;
	HFONT hFont, holdFont;

	static wchar_t ver1[] = L"Hello everybody,";
	static wchar_t ver2[] = L"This is forum for developer";
	static wchar_t ver3[] = L"Sharing everything";

	switch (msg)
	{
	case WM_PAINT:
		hdc = BeginPaint(hwnd, &ps);
		color = GetSysColor(COLOR_BTNFACE);
		SetBkColor(hdc, color);
		hFont = CreateFontW(15, 0, 0, 0, FW_MEDIUM, 0, 0, 0, 0, 0, 0, 0, 0, L"Georgia");
		holdFont = (HFONT)SelectObject(hdc, hFont);

		TextOutW(hdc, 50, 20, ver1, lstrlenW(ver1));
		TextOutW(hdc, 50, 40, ver2, lstrlenW(ver2));
		TextOutW(hdc, 50, 60, ver3, lstrlenW(ver3));

		SelectObject(hdc, holdFont);
		DeleteObject(hFont);

		EndPaint(hwnd, &ps);
		break;
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
	}
	return DefWindowProcW(hwnd, msg, wParam, lParam);
}